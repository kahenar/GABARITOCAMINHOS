{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-gabaritoengdata-01"
		},
		"ls_AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ls_AzureSqlDatabase'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=singledatabase.database.windows.net;Initial Catalog=db-gabaritoengdata-01;User ID=desafioengdata"
		},
		"lsAzureKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kvgabaritoengdata01.vault.azure.net/"
		},
		"ls_AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://lrsstoragegabarito01.dfs.core.windows.net"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LastModified",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from dbo.watermark where table_name = '@{pipeline().parameters.table_name_par}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ds_schema": {
										"value": "@pipeline().parameters.schema_par",
										"type": "Expression"
									},
									"ds_table": {
										"value": "@pipeline().parameters.table_name_par",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "MaxLastModified",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT max(ModifiedDate) as ModifiedDate  FROM @{pipeline().parameters.schema_par}.@{pipeline().parameters.table_name_par} ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {
									"ds_schema": {
										"value": "@pipeline().parameters.schema_par",
										"type": "Expression"
									},
									"ds_table": {
										"value": "@pipeline().parameters.table_name_par",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SetLastModified",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "last_modified",
							"value": {
								"value": "@activity('LastModified').output.firstRow.LastModified",
								"type": "Expression"
							}
						}
					},
					{
						"name": "SetMaxLastModified",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "MaxLastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "max_writed_value",
							"value": {
								"value": "@activity('MaxLastModified').output.firstRow.ModifiedDate",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "SetLastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetMaxLastModified",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "If Condition",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('last_modified'), variables('max_writed_value'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "SQL_to_landing",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select * from @{pipeline().parameters.schema_par}.@{pipeline().parameters.table_name_par} where ModifiedDate > '@{variables('last_modified')}' and ModifiedDate <= '@{variables('max_writed_value')}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {
												"ds_schema": {
													"value": "@pipeline().parameters.schema_par",
													"type": "Expression"
												},
												"ds_table": {
													"value": "@pipeline().parameters.table_name_par",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Parquet",
											"type": "DatasetReference",
											"parameters": {
												"ds_container": {
													"value": "@pipeline().parameters.container_par",
													"type": "Expression"
												},
												"ds_directory": {
													"value": "@pipeline().parameters.directory_par",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "GetFileName",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "SQL_to_landing",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "Parquet",
											"type": "DatasetReference",
											"parameters": {
												"ds_container": {
													"value": "@pipeline().parameters.container_par",
													"type": "Expression"
												},
												"ds_directory": {
													"value": "@pipeline().parameters.directory_par",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"childItems"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"schema_par": {
						"type": "string",
						"defaultValue": "SalesLT"
					},
					"table_name_par": {
						"type": "string",
						"defaultValue": "Customer"
					},
					"container_par": {
						"type": "string",
						"defaultValue": "landing"
					},
					"directory_par": {
						"type": "string",
						"defaultValue": "AdventureWorks/Customer/"
					}
				},
				"variables": {
					"last_modified": {
						"type": "String"
					},
					"max_writed_value": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable')]",
				"[concat(variables('factoryId'), '/datasets/Parquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_schema": {
						"type": "string"
					},
					"ds_table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().ds_schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().ds_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ds_container": {
						"type": "string"
					},
					"ds_directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lsAzureKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('lsAzureKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "conexãoDatalake",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ls_AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "lsAzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "adls-key-gabarito"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsAzureKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('ls_AzureSqlDatabase_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "lsAzureKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "azsql-pwd-key-gabarito"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lsAzureKeyVault')]"
			]
		}
	]
}